package org.ganjp.core.db.dialect;

/**
 * An SQL DIALECT for derby.
 * @author hanpeng chenlei
 * @since 4.0
 */
public class DerbyDialect extends DBDialect {

	public DerbyDialect() {
		super();
	}

	public String getAddColumnString() {
		return "add column";
	}

	public boolean dropConstraints() {
		return false;
	}

	public boolean supportsIdentityColumns() {
		return true;
	}

	public String getIdentitySelectString() {
		return "values IDENTITY_VAL_LOCAL()";
	}

	public String getIdentityColumnString() {
		return "not null generated by default as identity";
	}

	public String getIdentityInsertString() {
		return "default";
	}

	public String getSequenceNextValString(String sequenceName) {
		return "values nextval for " + sequenceName;
	}

	public String getCreateSequenceString(String sequenceName) {
		return "create sequence " + sequenceName;
	}

	public String getDropSequenceString(String sequenceName) {
		return "drop sequence " + sequenceName + " restrict";
	}

	public String getAlterSequencesString(String sequenceName, long newValue) {
		return "alter sequence " + sequenceName + " restart with "
				+ String.valueOf(newValue);
	}

	public String getQuerySequencesString() {
		return "select seqname from sysibm.SYSSEQUENCES";
	}

	public String getQuerySequencesString(String sequenceName) {
		return "select seqname from sysibm.SYSSEQUENCES where seqname = '"
				+ sequenceName.toUpperCase() + "'";
	}

	public boolean supportsSequences() {
		return false;
	}

	public boolean isSupportAlterSequenceRestart() {
		return true;
	}

	public String getBeforeAlterSequenceRestart(String seqname) {
		return null;
	}
}
